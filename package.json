{
  "name": "@puchi-be/source",
  "version": "0.0.0",
  "license": "UNLICENSED",
  "author": {
    "name": "[Tên của bạn]",
    "email": "[Email của bạn]"
  },
  "description": "Modern microservices backend for language learning application",
  "keywords": [
    "microservices",
    "nestjs",
    "kafka",
    "typescript",
    "language-learning"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/[username]/puchi-be.git"
  },
  "homepage": "https://github.com/[username]/puchi-be#readme",
  "bugs": {
    "url": "https://github.com/[username]/puchi-be/issues"
  },
  "scripts": {
    "dev": "nx run-many --target=serve --projects=api-gateway,user-service,lesson-service,progress-service,media-service,notification-service,vocabulary-service,quiz-service,analytics-service --parallel",
    "dev:gateway": "nx serve api-gateway",
    "dev:user": "nx serve user-service",
    "dev:lesson": "nx serve lesson-service",
    "dev:progress": "nx serve progress-service",
    "dev:media": "nx serve media-service",
    "dev:notification": "nx serve notification-service",
    "dev:vocabulary": "nx serve vocabulary-service",
    "dev:quiz": "nx serve quiz-service",
    "dev:analytics": "nx serve analytics-service",
    "dev:core": "nx run-many --target=serve --projects=user-service,lesson-service,progress-service --parallel",
    "dev:support": "nx run-many --target=serve --projects=notification-service,analytics-service --parallel",
    "dev:feature": "nx run-many --target=serve --projects=media-service,vocabulary-service,quiz-service --parallel",
    "build": "nx run-many --target=build --projects=api-gateway,user-service,lesson-service,progress-service,media-service,notification-service,vocabulary-service,quiz-service,analytics-service",
    "build:gateway": "nx build api-gateway",
    "build:user": "nx build user-service",
    "build:lesson": "nx build lesson-service",
    "build:progress": "nx build progress-service",
    "build:media": "nx build media-service",
    "build:notification": "nx build notification-service",
    "build:vocabulary": "nx build vocabulary-service",
    "build:quiz": "nx build quiz-service",
    "build:analytics": "nx build analytics-service",
    "test": "nx run-many --target=test --projects=api-gateway,user-service,lesson-service,progress-service,media-service,notification-service,vocabulary-service,quiz-service,analytics-service",
    "test:gateway": "nx test api-gateway",
    "test:user": "nx test user-service",
    "test:lesson": "nx test lesson-service",
    "test:progress": "nx test progress-service",
    "test:media": "nx test media-service",
    "test:notification": "nx test notification-service",
    "test:vocabulary": "nx test vocabulary-service",
    "test:quiz": "nx test quiz-service",
    "test:analytics": "nx test analytics-service",
    "lint": "nx run-many --target=lint --projects=api-gateway,user-service,lesson-service,progress-service,media-service,notification-service,vocabulary-service,quiz-service,analytics-service",
    "lint:fix": "nx run-many --target=lint --projects=api-gateway,user-service,lesson-service,progress-service,media-service,notification-service,vocabulary-service,quiz-service,analytics-service --fix",
    "db:generate": "prisma generate",
    "db:migrate": "prisma migrate dev",
    "db:migrate:deploy": "prisma migrate deploy",
    "db:studio": "prisma studio",
    "db:reset": "prisma migrate reset",
    "db:seed": "ts-node prisma/seed.ts",
    "db:setup:user": "cd apps/user-service && npx prisma generate && npx prisma db push",
    "db:setup:lesson": "cd apps/lesson-service && npx prisma generate && npx prisma db push",
    "db:setup:progress": "cd apps/progress-service && npx prisma generate && npx prisma db push",
    "db:setup:media": "cd apps/media-service && npx prisma generate && npx prisma db push",
    "db:setup:notification": "cd apps/notification-service && npx prisma generate && npx prisma db push",
    "db:setup:analytics": "cd apps/analytics-service && npx prisma generate && npx prisma db push",
    "db:setup:vocabulary": "cd apps/vocabulary-service && npx prisma generate && npx prisma db push",
    "db:setup:quiz": "cd apps/quiz-service && npx prisma generate && npx prisma db push",
    "db:setup:core": "npm run db:setup:user && npm run db:setup:lesson && npm run db:setup:progress",
    "db:setup:support": "npm run db:setup:notification && npm run db:setup:analytics",
    "db:setup:feature": "npm run db:setup:media && npm run db:setup:vocabulary && npm run db:setup:quiz",
    "db:setup:all": "npm run db:setup:core && npm run db:setup:support && npm run db:setup:feature",
    "db:studio:user": "cd apps/user-service && npx prisma studio",
    "db:studio:lesson": "cd apps/lesson-service && npx prisma studio",
    "db:studio:progress": "cd apps/progress-service && npx prisma studio",
    "db:studio:media": "cd apps/media-service && npx prisma studio",
    "db:studio:notification": "cd apps/notification-service && npx prisma studio",
    "db:studio:analytics": "cd apps/analytics-service && npx prisma studio",
    "db:studio:vocabulary": "cd apps/vocabulary-service && npx prisma studio",
    "db:studio:quiz": "cd apps/quiz-service && npx prisma studio",
    "docker:up": "docker-compose up -d",
    "docker:down": "docker-compose down",
    "docker:logs": "docker-compose logs -f",
    "kafka:up": "docker-compose up -d zookeeper kafka kafka-ui",
    "kafka:down": "docker-compose down zookeeper kafka kafka-ui",
    "kafka:topics": "docker exec kafka kafka-topics --list --bootstrap-server localhost:9092",
    "start:kafka": "powershell -ExecutionPolicy Bypass -File scripts/start-kafka.ps1",
    "migrate:kafka": "powershell -ExecutionPolicy Bypass -File scripts/migrate-to-kafka.ps1",
    "clean": "nx reset && nx run-many --target=clean --projects=api-gateway,user-service,lesson-service,progress-service,media-service,notification-service,vocabulary-service,quiz-service,analytics-service",
    "graph": "nx graph",
    "format": "prettier --write \"**/*.{ts,js,json,md}\"",
    "format:check": "prettier --check \"**/*.{ts,js,json,md}\"",
    "start:prod": "nx run-many --target=serve --projects=api-gateway,user-service,lesson-service,progress-service,media-service,notification-service,vocabulary-service,quiz-service,analytics-service --prod"
  },
  "private": true,
  "dependencies": {
    "@clerk/backend": "^2.3.0",
    "@nestjs/common": "^11.1.1",
    "@nestjs/config": "^4.0.2",
    "@nestjs/core": "^11.1.1",
    "@nestjs/event-emitter": "^3.0.1",
    "@nestjs/microservices": "^11.1.1",
    "@nestjs/passport": "^11.0.5",
    "@nestjs/platform-express": "^11.1.1",
    "@prisma/client": "^6.8.2",
    "axios": "^1.9.0",
    "class-transformer": "^0.5.1",
    "class-validator": "^0.14.2",
    "kafkajs": "^2.2.4",
    "passport-custom": "^1.1.1",
    "reflect-metadata": "^0.2.2",
    "rxjs": "^7.8.2"
  },
  "devDependencies": {
    "@eslint/js": "^9.26.0",
    "@nestjs/schematics": "^11.0.5",
    "@nestjs/testing": "^11.1.1",
    "@nx/eslint": "21.0.3",
    "@nx/eslint-plugin": "21.0.3",
    "@nx/jest": "21.0.3",
    "@nx/js": "21.0.3",
    "@nx/nest": "21.0.3",
    "@nx/node": "21.0.3",
    "@nx/web": "21.0.3",
    "@nx/webpack": "21.0.3",
    "@nx/workspace": "21.0.3",
    "@swc-node/register": "~1.10.10",
    "@swc/core": "~1.11.24",
    "@swc/helpers": "~0.5.17",
    "@types/jest": "^29.5.14",
    "@types/node": "~22.15.18",
    "eslint": "^9.26.0",
    "eslint-config-prettier": "^10.1.5",
    "jest": "^29.7.0",
    "jest-environment-node": "^29.7.0",
    "jsonc-eslint-parser": "^2.1.0",
    "nx": "21.0.3",
    "prettier": "^3.5.3",
    "prisma": "^6.8.2",
    "ts-jest": "^29.3.2",
    "ts-node": "10.9.2",
    "tslib": "^2.8.1",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.32.1",
    "webpack-cli": "^6.0.1"
  }
}
